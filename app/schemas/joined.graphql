type Query {
  getUsers(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
  getUser(id: String!): User
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser: User!
  deleteOneUser(id: String!): User!
  updateUser(data: UpdateUserInput!): User!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

type User {
  id: ID!
  name: String!
  email: String
  password: String
  updated_at: String!
  created_at: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updated_at_ASC
  updated_at_DESC
  created_at_ASC
  created_at_DESC
}

schema {
  query: Query
  mutation: Mutation
}
